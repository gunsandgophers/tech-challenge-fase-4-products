package mocks

import (
	"tech-challenge-fase-1/internal/infra/database"

	mock "github.com/stretchr/testify/mock"
)

// MockConnectionDB is an autogenerated mock type for the ConnectionDB type
type MockConnectionDB struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockConnectionDB) Close() {
	_m.Called()
}

// Exec provides a mock function with given fields: sql, args
func (_m *MockConnectionDB) Exec(sql string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, sql)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) error); ok {
		r0 = rf(sql, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Query provides a mock function with given fields: sql, args
func (_m *MockConnectionDB) Query(sql string, args ...interface{}) (database.RowsDB, error) {
	var _ca []interface{}
	_ca = append(_ca, sql)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 database.RowsDB
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) (database.RowsDB, error)); ok {
		return rf(sql, args...)
	}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) database.RowsDB); ok {
		r0 = rf(sql, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.RowsDB)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(sql, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryRow provides a mock function with given fields: sql, args
func (_m *MockConnectionDB) QueryRow(sql string, args ...interface{}) database.RowDB {
	var _ca []interface{}
	_ca = append(_ca, sql)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 database.RowDB
	if rf, ok := ret.Get(0).(func(string, ...interface{}) database.RowDB); ok {
		r0 = rf(sql, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.RowDB)
		}
	}

	return r0
}

// NewMockConnectionDB creates a new instance of MockConnectionDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConnectionDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConnectionDB {
	mock := &MockConnectionDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
